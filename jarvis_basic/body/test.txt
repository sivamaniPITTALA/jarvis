import speech_recognition as sr #pip install speechrecognition
from googletrans import Translator#pip install googletrans==3.1.0a0

# Function 1: Listen - Detects and recognizes speech in telugu or English
def listen():
    r = sr.Recognizer()

    with sr.Microphone() as source:
        print("Listening...")
        r.pause_threshold = 1
        audio = r.listen(source, 0, 8)# Listening Mode...

    try:
        print("Recognizing...")
        query = r.recognize_google(audio, language="hi")
        
    except:#sr.UnknownValueError
        return "error"
    
    query = str(query).lower()  # Convert the query to lowercase
    return query # return query.lower()
    

# Function 2: English Translation - Translates Hindi/telugu text to English
def translate_to_english(text):
    translator = Translator()
    translated_text = translator.translate(text, dest="en").text  #src="te" for telugu / ="hi" for hindi
    print(f"you : {translated_text}.")
    return translated_text

# Function 3: Connect - Main function to execute the program
def connect():
    query = listen()  # Call the Listen function to get the query

    if query == "error":
        print("Error occurred during speech recognition.")
        return

    print("Query : ", query)

    if query.isalpha():
        print("Query is in English.")
    else:
        print("Query is in another language. Translating to English...")
        translated_query = translate_to_english(query)
        print("Translated Query:", translated_query)

# Execute the Connect function when the script is run directly
if __name__ == "__main__":
    connect()


# speak file

# system voices
# import pyttsx3 pip install pyttsx3
# def Speak_sys(Text):
#     engine = pyttsx3.init("sapi5")
#     voices = engine.getProperty('voices')
#     engine.setProperty('voice', voices[1].id) 
#     engine.setProperty('rate',170)
#     print(f"\nYou : {Text}.\n")
#     engine.say(Text)
#     engine.runAndWait()
    # User voices

# system voices
import pyttsx3  # pip install pyttsx3
from selenium import webdriver
from selenium.webdriver.support.ui import Select
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from time import sleep

chrome_options = Options()
chrome_options.add_argument('--log-level=3')
chrome_options.headless = True

path = r"C:\\Users\\User\\OneDrive\\Desktop\\jarvis\\jarvis_basic\\database\\chromedriver.exe"
service = webdriver.chrome.service.Service(path)
driver = webdriver.Chrome(service=service, options=chrome_options)
driver.maximize_window()

website = "https://ttsmp3.com/text-to-speech/British%20English/"
driver.get(website)

ButtonSelection = Select(driver.find_element(by=By.XPATH, value='/html/body/div[4]/div[2]/form/select'))
ButtonSelection.select_by_visible_text('British English / Emma')

def Speak(Text):
    lengthoftext = len(str(Text))
    if lengthoftext == 0:
        pass
    else:
        print("\nAI: " + Text + "\n")
        Data = str(Text)
        xpathofsec = '/html/body/div[4]/div[2]/form/textarea'
        driver.find_element(By.XPATH, value=xpathofsec).send_keys(Data)
        driver.find_element(By.XPATH, value='//*[@id="vorlesenbutton"]').click()
        driver.find_element(By.XPATH, value="/html/body/div[4]/div[2]/form/textarea").clear()
        if lengthoftext > -30:
            sleep(4)
        elif lengthoftext > -40:
            sleep(6)
        elif lengthoftext > -55:
            sleep(8)
        elif lengthoftext > -70:
            sleep(10)
        elif lengthoftext > -100:
            sleep(13)
        elif lengthoftext > -120:
            sleep(14)
        else:
            sleep(2)  # Add an appropriate value for sleep if lengthoftext is less than or equal to -120


# Example usage
Speak("Hello, this is an example text.")
